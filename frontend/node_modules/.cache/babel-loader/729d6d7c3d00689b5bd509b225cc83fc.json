{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$();\n\nimport BigNumber from 'bignumber.js';\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport useRefresh from 'hooks/useRefresh';\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync } from './actions';\nimport { QuoteToken } from '../config/constants/types';\nconst ZERO = new BigNumber(0);\nexport const useFetchPublicData = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    slowRefresh\n  } = useRefresh();\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync());\n    dispatch(fetchPoolsPublicDataAsync());\n  }, [dispatch, slowRefresh]);\n}; // Farms\n\n_s(useFetchPublicData, \"62xjdgPJn/QiIg6iwBNbkeZ7l4I=\", false, function () {\n  return [useDispatch, useRefresh];\n});\n\nexport const useFarms = () => {\n  _s2();\n\n  const farms = useSelector(state => state.farms.data);\n  return farms;\n};\n\n_s2(useFarms, \"40tjDYBLbzKzCIdd0cwm+UIfe9E=\", false, function () {\n  return [useSelector];\n});\n\nexport const useFarmFromPid = pid => {\n  _s3();\n\n  const farm = useSelector(state => state.farms.data.find(f => f.pid === pid));\n  return farm;\n};\n\n_s3(useFarmFromPid, \"TOdL9+Oz8AEj+wmjEA7Olv/caxU=\", false, function () {\n  return [useSelector];\n});\n\nexport const useFarmFromSymbol = lpSymbol => {\n  _s4();\n\n  const farm = useSelector(state => state.farms.data.find(f => f.lpSymbol === lpSymbol));\n  return farm;\n};\n\n_s4(useFarmFromSymbol, \"TOdL9+Oz8AEj+wmjEA7Olv/caxU=\", false, function () {\n  return [useSelector];\n});\n\nexport const useFarmUser = pid => {\n  _s5();\n\n  const farm = useFarmFromPid(pid);\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0)\n  };\n}; // Pools\n\n_s5(useFarmUser, \"kxbBDHm0i5EJweIp+RPzOgw8PRU=\", false, function () {\n  return [useFarmFromPid];\n});\n\nexport const usePools = account => {\n  _s6();\n\n  const {\n    fastRefresh\n  } = useRefresh();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account));\n    }\n  }, [account, dispatch, fastRefresh]);\n  const pools = useSelector(state => state.pools.data);\n  return pools;\n};\n\n_s6(usePools, \"WIyMD4ufrhPkRVRaHSFmHSaimvo=\", false, function () {\n  return [useRefresh, useDispatch, useSelector];\n});\n\nexport const usePoolFromPid = sousId => {\n  _s7();\n\n  const pool = useSelector(state => state.pools.data.find(p => p.sousId === sousId));\n  return pool;\n}; // Prices\n\n_s7(usePoolFromPid, \"NElEvYvoNsaNFrfsmEnHfa4jRII=\", false, function () {\n  return [useSelector];\n});\n\nexport const usePriceBnbBusd = () => {\n  // const pid = 13 // BUSD-BNB LP\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n  return ZERO;\n};\nexport const usePriceCakeBusd = () => {\n  // TODO: add LOLI-bnb pool\n  // const pid = 0 // CAKE-BNB LP\n  // const bnbPriceUSD = usePriceBnbBusd()\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\n  return ZERO; // const pid = 0 // EGG-BUSD LP\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n};\nexport const useTotalValue = () => {\n  _s8();\n\n  const farms = useFarms();\n  const bnbPrice = usePriceBnbBusd();\n  const cakePrice = usePriceCakeBusd();\n  let value = new BigNumber(0);\n\n  for (let i = 0; i < farms.length; i++) {\n    const farm = farms[i];\n\n    if (farm.lpTotalInQuoteToken) {\n      let val;\n\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n        val = bnbPrice.times(farm.lpTotalInQuoteToken);\n      } else {\n        val = new BigNumber(farm.lpTotalInQuoteToken);\n      }\n\n      value = value.plus(val);\n    }\n  }\n\n  return value;\n};\n\n_s8(useTotalValue, \"r6KOcd+Au1Cbju+lCn+Kj9ulyJM=\", false, function () {\n  return [useFarms, usePriceBnbBusd, usePriceCakeBusd];\n});","map":{"version":3,"sources":["/home/musashi_daryl/Data/musashi_daryl/SOLIDITY/testfarm/frontend/src/state/hooks.ts"],"names":["BigNumber","useEffect","useSelector","useDispatch","useRefresh","fetchFarmsPublicDataAsync","fetchPoolsPublicDataAsync","fetchPoolsUserDataAsync","QuoteToken","ZERO","useFetchPublicData","dispatch","slowRefresh","useFarms","farms","state","data","useFarmFromPid","pid","farm","find","f","useFarmFromSymbol","lpSymbol","useFarmUser","allowance","userData","tokenBalance","stakedBalance","earnings","usePools","account","fastRefresh","pools","usePoolFromPid","sousId","pool","p","usePriceBnbBusd","usePriceCakeBusd","useTotalValue","bnbPrice","cakePrice","value","i","length","lpTotalInQuoteToken","val","quoteTokenSymbol","BNB","times","plus"],"mappings":"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","sourcesContent":["import { collapseTextChangeRangesAcrossMultipleVersions } from 'typescript'\nimport BigNumber from 'bignumber.js'\nimport { useEffect, useMemo } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync } from './actions'\nimport { State, Farm, Pool } from './types'\nimport { QuoteToken } from '../config/constants/types'\n\n\n\nconst ZERO = new BigNumber(0)\n\nexport const useFetchPublicData = () => {\n  const dispatch = useDispatch()\n  const { slowRefresh } = useRefresh()\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync())\n    dispatch(fetchPoolsPublicDataAsync())\n\n  }, [dispatch, slowRefresh])\n}\n\n// Farms\n\nexport const useFarms = (): Farm[] => {\n  const farms = useSelector((state: State) => state.farms.data)\n  return farms\n}\n\nexport const useFarmFromPid = (pid): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\nexport const useFarmUser = (pid) => {\n  const farm = useFarmFromPid(pid)\n\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\n  }\n}\n\n// Pools\n\nexport const usePools = (account): Pool[] => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n  \n  const pools = useSelector((state: State) => state.pools.data)\n  return pools\n}\n\n\nexport const usePoolFromPid = (sousId): Pool => {\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\n  return pool\n}\n\n// Prices\n\nexport const usePriceBnbBusd = (): BigNumber => {\n  // const pid = 13 // BUSD-BNB LP\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n  return ZERO\n}\n\nexport const usePriceCakeBusd = (): BigNumber => {\n  // TODO: add LOLI-bnb pool\n  // const pid = 0 // CAKE-BNB LP\n  // const bnbPriceUSD = usePriceBnbBusd()\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\n\n  return ZERO\n  // const pid = 0 // EGG-BUSD LP\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\n\n  export const useTotalValue = (): BigNumber => {\n  const farms = useFarms()\n  const bnbPrice = usePriceBnbBusd()\n  const cakePrice = usePriceCakeBusd()\n  let value = new BigNumber(0)\n\n  for (let i = 0; i < farms.length; i++) {\n    const farm = farms[i]\n    if (farm.lpTotalInQuoteToken) {\n      let val\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n        val = bnbPrice.times(farm.lpTotalInQuoteToken)\n      } \n      else {\n        val = new BigNumber(farm.lpTotalInQuoteToken)\n      }\n      value = value.plus(val)\n    }\n  }\n  return value\n}\n"]},"metadata":{},"sourceType":"module"}