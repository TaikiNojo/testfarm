{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { ethers } from 'ethers';\nimport { useDispatch } from 'react-redux';\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions';\nimport { approve } from 'utils/callHelpers';\nimport { useMasterchef, useCake, useSousChef, useLottery, usePresale, useBUSD } from './useContract'; // Approve a Farm\n\nexport const useApprove = lpContract => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useWallet();\n  const masterChefContract = useMasterchef();\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account);\n      dispatch(fetchFarmUserDataAsync(account));\n      return tx;\n    } catch (e) {\n      return false;\n    }\n  }, [account, dispatch, lpContract, masterChefContract]);\n  return {\n    onApprove: handleApprove\n  };\n};\n\n_s(useApprove, \"912YkJ6AGYumCBnuye56mVxNDwo=\", false, function () {\n  return [useDispatch, useWallet, useMasterchef];\n});\n\nexport const usePresaleBUSDApprove = () => {\n  _s2();\n\n  const {\n    account\n  } = useWallet();\n  const busdContract = useBUSD();\n  const presaleContract = usePresale();\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(busdContract, presaleContract, account);\n      return tx;\n    } catch (e) {\n      return false;\n    }\n  }, [account, busdContract, presaleContract]);\n  return {\n    onApprove: handleApprove\n  };\n}; // Approve a Pool\n\n_s2(usePresaleBUSDApprove, \"iCZEnEdHd3XQmwr0/ZY03FMJp/k=\", false, function () {\n  return [useWallet, useBUSD, usePresale];\n});\n\nexport const useSousApprove = (lpContract, sousId) => {\n  _s3();\n\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useWallet();\n  const sousChefContract = useSousChef(sousId);\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account);\n      dispatch(updateUserAllowance(sousId, account));\n      return tx;\n    } catch (e) {\n      return false;\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId]);\n  return {\n    onApprove: handleApprove\n  };\n}; // Approve the lottery\n\n_s3(useSousApprove, \"ggN7BKqdJe4zaUSHEp+Mf3+jW2Q=\", false, function () {\n  return [useDispatch, useWallet, useSousChef];\n});\n\nexport const useLotteryApprove = () => {\n  _s4();\n\n  const {\n    account\n  } = useWallet();\n  const cakeContract = useCake();\n  const lotteryContract = useLottery();\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account);\n      return tx;\n    } catch (e) {\n      return false;\n    }\n  }, [account, cakeContract, lotteryContract]);\n  return {\n    onApprove: handleApprove\n  };\n}; // Approve an IFO\n\n_s4(useLotteryApprove, \"qmmDwizDBCPS/KQkbYFMkBrCi+A=\", false, function () {\n  return [useWallet, useCake, useLottery];\n});\n\nexport const useIfoApprove = (tokenContract, spenderAddress) => {\n  _s5();\n\n  const {\n    account\n  } = useWallet();\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods.approve(spenderAddress, ethers.constants.MaxUint256).send({\n        from: account\n      });\n      return tx;\n    } catch {\n      return false;\n    }\n  }, [account, spenderAddress, tokenContract]);\n  return onApprove;\n};\n\n_s5(useIfoApprove, \"5YEWPx3HiFEhK5UYbT6NzOlDPbw=\", false, function () {\n  return [useWallet];\n});","map":{"version":3,"sources":["/home/musashi_daryl/Data/musashi_daryl/SOLIDITY/testfarm/frontend/src/hooks/useApprove.ts"],"names":["useCallback","useWallet","ethers","useDispatch","updateUserAllowance","fetchFarmUserDataAsync","approve","useMasterchef","useCake","useSousChef","useLottery","usePresale","useBUSD","useApprove","lpContract","dispatch","account","masterChefContract","handleApprove","tx","e","onApprove","usePresaleBUSDApprove","busdContract","presaleContract","useSousApprove","sousId","sousChefContract","useLotteryApprove","cakeContract","lotteryContract","useIfoApprove","tokenContract","spenderAddress","methods","constants","MaxUint256","send","from"],"mappings":"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","sourcesContent":["import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve, } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useSousChef, useLottery ,usePresale,useBUSD} from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n\nexport const usePresaleBUSDApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const busdContract = useBUSD()\n  const presaleContract = usePresale()\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(busdContract, presaleContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, busdContract, presaleContract])\n\n  return { onApprove: handleApprove } \n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n"]},"metadata":{},"sourceType":"module"}